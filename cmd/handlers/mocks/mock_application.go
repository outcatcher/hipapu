// Code generated by mockery. DO NOT EDIT.

//go:build test

package mocks

import (
	context "context"

	app "github.com/outcatcher/hipapu/app"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Mockapplication is an autogenerated mock type for the application type
type Mockapplication struct {
	mock.Mock
}

type Mockapplication_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockapplication) EXPECT() *Mockapplication_Expecter {
	return &Mockapplication_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: remoteURL, localPath
func (_m *Mockapplication) Add(remoteURL string, localPath string) error {
	ret := _m.Called(remoteURL, localPath)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(remoteURL, localPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockapplication_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Mockapplication_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - remoteURL string
//   - localPath string
func (_e *Mockapplication_Expecter) Add(remoteURL interface{}, localPath interface{}) *Mockapplication_Add_Call {
	return &Mockapplication_Add_Call{Call: _e.mock.On("Add", remoteURL, localPath)}
}

func (_c *Mockapplication_Add_Call) Run(run func(remoteURL string, localPath string)) *Mockapplication_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Mockapplication_Add_Call) Return(_a0 error) *Mockapplication_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockapplication_Add_Call) RunAndReturn(run func(string, string) error) *Mockapplication_Add_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *Mockapplication) List(ctx context.Context) ([]app.Installation, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []app.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]app.Installation, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []app.Installation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]app.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockapplication_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Mockapplication_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockapplication_Expecter) List(ctx interface{}) *Mockapplication_List_Call {
	return &Mockapplication_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *Mockapplication_List_Call) Run(run func(ctx context.Context)) *Mockapplication_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockapplication_List_Call) Return(_a0 []app.Installation, _a1 error) *Mockapplication_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockapplication_List_Call) RunAndReturn(run func(context.Context) ([]app.Installation, error)) *Mockapplication_List_Call {
	_c.Call.Return(run)
	return _c
}

// Synchronize provides a mock function with given fields: ctx, writer
func (_m *Mockapplication) Synchronize(ctx context.Context, writer io.Writer) error {
	ret := _m.Called(ctx, writer)

	if len(ret) == 0 {
		panic("no return value specified for Synchronize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Writer) error); ok {
		r0 = rf(ctx, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockapplication_Synchronize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Synchronize'
type Mockapplication_Synchronize_Call struct {
	*mock.Call
}

// Synchronize is a helper method to define mock.On call
//   - ctx context.Context
//   - writer io.Writer
func (_e *Mockapplication_Expecter) Synchronize(ctx interface{}, writer interface{}) *Mockapplication_Synchronize_Call {
	return &Mockapplication_Synchronize_Call{Call: _e.mock.On("Synchronize", ctx, writer)}
}

func (_c *Mockapplication_Synchronize_Call) Run(run func(ctx context.Context, writer io.Writer)) *Mockapplication_Synchronize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Writer))
	})
	return _c
}

func (_c *Mockapplication_Synchronize_Call) Return(_a0 error) *Mockapplication_Synchronize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockapplication_Synchronize_Call) RunAndReturn(run func(context.Context, io.Writer) error) *Mockapplication_Synchronize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockapplication creates a new instance of Mockapplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockapplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockapplication {
	mock := &Mockapplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
