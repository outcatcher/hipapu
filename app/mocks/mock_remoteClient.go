// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	remote "github.com/outcatcher/hipapu/internal/remote"
)

// MockremoteClient is an autogenerated mock type for the remoteClient type
type MockremoteClient struct {
	mock.Mock
}

type MockremoteClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockremoteClient) EXPECT() *MockremoteClient_Expecter {
	return &MockremoteClient_Expecter{mock: &_m.Mock}
}

// DownloadFile provides a mock function with given fields: ctx, downloadURL, writer
func (_m *MockremoteClient) DownloadFile(ctx context.Context, downloadURL string, writer io.Writer) error {
	ret := _m.Called(ctx, downloadURL, writer)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) error); ok {
		r0 = rf(ctx, downloadURL, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockremoteClient_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type MockremoteClient_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - downloadURL string
//   - writer io.Writer
func (_e *MockremoteClient_Expecter) DownloadFile(ctx interface{}, downloadURL interface{}, writer interface{}) *MockremoteClient_DownloadFile_Call {
	return &MockremoteClient_DownloadFile_Call{Call: _e.mock.On("DownloadFile", ctx, downloadURL, writer)}
}

func (_c *MockremoteClient_DownloadFile_Call) Run(run func(ctx context.Context, downloadURL string, writer io.Writer)) *MockremoteClient_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Writer))
	})
	return _c
}

func (_c *MockremoteClient_DownloadFile_Call) Return(_a0 error) *MockremoteClient_DownloadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockremoteClient_DownloadFile_Call) RunAndReturn(run func(context.Context, string, io.Writer) error) *MockremoteClient_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRelease provides a mock function with given fields: ctx, owner, repo
func (_m *MockremoteClient) GetLatestRelease(ctx context.Context, owner string, repo string) (*remote.Release, error) {
	ret := _m.Called(ctx, owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRelease")
	}

	var r0 *remote.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*remote.Release, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *remote.Release); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*remote.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockremoteClient_GetLatestRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRelease'
type MockremoteClient_GetLatestRelease_Call struct {
	*mock.Call
}

// GetLatestRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *MockremoteClient_Expecter) GetLatestRelease(ctx interface{}, owner interface{}, repo interface{}) *MockremoteClient_GetLatestRelease_Call {
	return &MockremoteClient_GetLatestRelease_Call{Call: _e.mock.On("GetLatestRelease", ctx, owner, repo)}
}

func (_c *MockremoteClient_GetLatestRelease_Call) Run(run func(ctx context.Context, owner string, repo string)) *MockremoteClient_GetLatestRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockremoteClient_GetLatestRelease_Call) Return(_a0 *remote.Release, _a1 error) *MockremoteClient_GetLatestRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockremoteClient_GetLatestRelease_Call) RunAndReturn(run func(context.Context, string, string) (*remote.Release, error)) *MockremoteClient_GetLatestRelease_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockremoteClient creates a new instance of MockremoteClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockremoteClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockremoteClient {
	mock := &MockremoteClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
