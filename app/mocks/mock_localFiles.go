// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	local "github.com/outcatcher/hipapu/internal/local"
	mock "github.com/stretchr/testify/mock"
)

// MocklocalFiles is an autogenerated mock type for the localFiles type
type MocklocalFiles struct {
	mock.Mock
}

type MocklocalFiles_Expecter struct {
	mock *mock.Mock
}

func (_m *MocklocalFiles) EXPECT() *MocklocalFiles_Expecter {
	return &MocklocalFiles_Expecter{mock: &_m.Mock}
}

// GetFileInfo provides a mock function with given fields: filePath
func (_m *MocklocalFiles) GetFileInfo(filePath string) (*local.FileInfo, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for GetFileInfo")
	}

	var r0 *local.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*local.FileInfo, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) *local.FileInfo); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*local.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocklocalFiles_GetFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileInfo'
type MocklocalFiles_GetFileInfo_Call struct {
	*mock.Call
}

// GetFileInfo is a helper method to define mock.On call
//   - filePath string
func (_e *MocklocalFiles_Expecter) GetFileInfo(filePath interface{}) *MocklocalFiles_GetFileInfo_Call {
	return &MocklocalFiles_GetFileInfo_Call{Call: _e.mock.On("GetFileInfo", filePath)}
}

func (_c *MocklocalFiles_GetFileInfo_Call) Run(run func(filePath string)) *MocklocalFiles_GetFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MocklocalFiles_GetFileInfo_Call) Return(_a0 *local.FileInfo, _a1 error) *MocklocalFiles_GetFileInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocklocalFiles_GetFileInfo_Call) RunAndReturn(run func(string) (*local.FileInfo, error)) *MocklocalFiles_GetFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocklocalFiles creates a new instance of MocklocalFiles. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocklocalFiles(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocklocalFiles {
	mock := &MocklocalFiles{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
