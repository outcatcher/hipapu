// Code generated by mockery. DO NOT EDIT.

//go:build test

package mocks

import (
	installations "github.com/outcatcher/hipapu/internal/installations"
	mock "github.com/stretchr/testify/mock"
)

// MockinstallationsLock is an autogenerated mock type for the installationsLock type
type MockinstallationsLock struct {
	mock.Mock
}

type MockinstallationsLock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinstallationsLock) EXPECT() *MockinstallationsLock_Expecter {
	return &MockinstallationsLock_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: installation
func (_m *MockinstallationsLock) Add(installation installations.Installation) error {
	ret := _m.Called(installation)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(installations.Installation) error); ok {
		r0 = rf(installation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockinstallationsLock_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockinstallationsLock_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - installation installations.Installation
func (_e *MockinstallationsLock_Expecter) Add(installation interface{}) *MockinstallationsLock_Add_Call {
	return &MockinstallationsLock_Add_Call{Call: _e.mock.On("Add", installation)}
}

func (_c *MockinstallationsLock_Add_Call) Run(run func(installation installations.Installation)) *MockinstallationsLock_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(installations.Installation))
	})
	return _c
}

func (_c *MockinstallationsLock_Add_Call) Return(_a0 error) *MockinstallationsLock_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockinstallationsLock_Add_Call) RunAndReturn(run func(installations.Installation) error) *MockinstallationsLock_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstallations provides a mock function with no fields
func (_m *MockinstallationsLock) GetInstallations() []installations.Installation {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstallations")
	}

	var r0 []installations.Installation
	if rf, ok := ret.Get(0).(func() []installations.Installation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]installations.Installation)
		}
	}

	return r0
}

// MockinstallationsLock_GetInstallations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallations'
type MockinstallationsLock_GetInstallations_Call struct {
	*mock.Call
}

// GetInstallations is a helper method to define mock.On call
func (_e *MockinstallationsLock_Expecter) GetInstallations() *MockinstallationsLock_GetInstallations_Call {
	return &MockinstallationsLock_GetInstallations_Call{Call: _e.mock.On("GetInstallations")}
}

func (_c *MockinstallationsLock_GetInstallations_Call) Run(run func()) *MockinstallationsLock_GetInstallations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockinstallationsLock_GetInstallations_Call) Return(_a0 []installations.Installation) *MockinstallationsLock_GetInstallations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockinstallationsLock_GetInstallations_Call) RunAndReturn(run func() []installations.Installation) *MockinstallationsLock_GetInstallations_Call {
	_c.Call.Return(run)
	return _c
}

// LoadInstallations provides a mock function with given fields: path
func (_m *MockinstallationsLock) LoadInstallations(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for LoadInstallations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockinstallationsLock_LoadInstallations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadInstallations'
type MockinstallationsLock_LoadInstallations_Call struct {
	*mock.Call
}

// LoadInstallations is a helper method to define mock.On call
//   - path string
func (_e *MockinstallationsLock_Expecter) LoadInstallations(path interface{}) *MockinstallationsLock_LoadInstallations_Call {
	return &MockinstallationsLock_LoadInstallations_Call{Call: _e.mock.On("LoadInstallations", path)}
}

func (_c *MockinstallationsLock_LoadInstallations_Call) Run(run func(path string)) *MockinstallationsLock_LoadInstallations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockinstallationsLock_LoadInstallations_Call) Return(_a0 error) *MockinstallationsLock_LoadInstallations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockinstallationsLock_LoadInstallations_Call) RunAndReturn(run func(string) error) *MockinstallationsLock_LoadInstallations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVersion provides a mock function with no fields
func (_m *MockinstallationsLock) UpdateVersion() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdateVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockinstallationsLock_UpdateVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVersion'
type MockinstallationsLock_UpdateVersion_Call struct {
	*mock.Call
}

// UpdateVersion is a helper method to define mock.On call
func (_e *MockinstallationsLock_Expecter) UpdateVersion() *MockinstallationsLock_UpdateVersion_Call {
	return &MockinstallationsLock_UpdateVersion_Call{Call: _e.mock.On("UpdateVersion")}
}

func (_c *MockinstallationsLock_UpdateVersion_Call) Run(run func()) *MockinstallationsLock_UpdateVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockinstallationsLock_UpdateVersion_Call) Return(_a0 error) *MockinstallationsLock_UpdateVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockinstallationsLock_UpdateVersion_Call) RunAndReturn(run func() error) *MockinstallationsLock_UpdateVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockinstallationsLock creates a new instance of MockinstallationsLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinstallationsLock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinstallationsLock {
	mock := &MockinstallationsLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
