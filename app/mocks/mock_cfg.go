// Code generated by mockery. DO NOT EDIT.

//go:build test

package mocks

import (
	config "github.com/outcatcher/hipapu/internal/config"
	mock "github.com/stretchr/testify/mock"
)

// Mockcfg is an autogenerated mock type for the cfg type
type Mockcfg struct {
	mock.Mock
}

type Mockcfg_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockcfg) EXPECT() *Mockcfg_Expecter {
	return &Mockcfg_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: installation
func (_m *Mockcfg) Add(installation config.Installation) error {
	ret := _m.Called(installation)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(config.Installation) error); ok {
		r0 = rf(installation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockcfg_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Mockcfg_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - installation config.Installation
func (_e *Mockcfg_Expecter) Add(installation interface{}) *Mockcfg_Add_Call {
	return &Mockcfg_Add_Call{Call: _e.mock.On("Add", installation)}
}

func (_c *Mockcfg_Add_Call) Run(run func(installation config.Installation)) *Mockcfg_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Installation))
	})
	return _c
}

func (_c *Mockcfg_Add_Call) Return(_a0 error) *Mockcfg_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockcfg_Add_Call) RunAndReturn(run func(config.Installation) error) *Mockcfg_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstallations provides a mock function with no fields
func (_m *Mockcfg) GetInstallations() []config.Installation {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstallations")
	}

	var r0 []config.Installation
	if rf, ok := ret.Get(0).(func() []config.Installation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.Installation)
		}
	}

	return r0
}

// Mockcfg_GetInstallations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstallations'
type Mockcfg_GetInstallations_Call struct {
	*mock.Call
}

// GetInstallations is a helper method to define mock.On call
func (_e *Mockcfg_Expecter) GetInstallations() *Mockcfg_GetInstallations_Call {
	return &Mockcfg_GetInstallations_Call{Call: _e.mock.On("GetInstallations")}
}

func (_c *Mockcfg_GetInstallations_Call) Run(run func()) *Mockcfg_GetInstallations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockcfg_GetInstallations_Call) Return(_a0 []config.Installation) *Mockcfg_GetInstallations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockcfg_GetInstallations_Call) RunAndReturn(run func() []config.Installation) *Mockcfg_GetInstallations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcfg creates a new instance of Mockcfg. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcfg(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockcfg {
	mock := &Mockcfg{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
